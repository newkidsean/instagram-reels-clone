{"version":3,"sources":["VideoHeader.js","VideoFooter.js","VideoCard.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["VideoHeader","className","VideoFooter","channel","song","likes","shares","avatarSrc","Avatar","src","Button","mode","index","fontSize","VideoCard","url","useState","isVideoPlaying","setIsVideoPlaying","videoRef","useRef","ref","onClick","current","pause","play","alt","loop","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","reels","setReels","useEffect","collection","onSnapshot","snapshot","docs","map","doc","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.348dcff8.chunk.js","sourcesContent":["import React from 'react';\nimport './VideoHeader.css';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport CameraAltOutlinedIcon from '@material-ui/icons/CameraAltOutlined';\n\nfunction VideoHeader() {\n    return (\n        <div className=\"videoHeader\">\n           <ArrowBackIosIcon /> \n           <h3>Reels</h3>\n           <CameraAltOutlinedIcon />\n        </div>\n    )\n}\n\nexport default VideoHeader\n","import React from 'react';\nimport './VideoFooter.css';\nimport { Button, Avatar } from \"@material-ui/core\"\nimport MusicNoteIcon from \"@material-ui/icons/MusicNote\";\nimport Ticker from \"react-ticker\";\nimport ModeCommentIcon from \"@material-ui/icons/ModeComment\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\n\nfunction VideoFooter({ channel, song, likes, shares, avatarSrc }) {\n    return (\n        <div className=\"videoFooter\">\n            <div className=\"videoFooter__text\">\n            <Avatar src={avatarSrc} />\n            <h3>\n            {channel} . <Button>Follow</Button>\n            </h3>\n            </div>\n\n            <div className=\"videoFooter__ticker\">\n            <MusicNoteIcon className=\"videoFooter__icon\" />\n            <Ticker mode=\"smooth\">\n                {({ index }) => (\n                    <>\n                    <h1>{song}</h1>\n                    </>\n                )}\n            </Ticker>\n            </div>\n            <div className=\"videoFooter__actions\">\n              <div className=\"videoFooter__actionsLeft\">\n                  <FavoriteIcon fontSize=\"medium\" />  \n                  <ModeCommentIcon fontSize=\"medium\" />  \n                  <SendIcon fontSize=\"medium\" />  \n                  <MoreHorizIcon fontSize=\"medium\" />  \n              </div>\n              <div className=\"videoFooter__actionsRight\">\n                <div className=\"videoFooter__stat\">\n                    <FavoriteIcon />\n                    <p>{likes}</p>\n                </div>\n                <div className=\"videoFooter__stat\">\n                    <ModeCommentIcon />\n                    <p>{shares}</p>\n                </div>\n              </div>\n            </div>\n        </div>\n    )\n}\n\nexport default VideoFooter\n","import React, { useState, useRef } from 'react';\nimport VideoHeader from './VideoHeader';\nimport VideoFooter from './VideoFooter';\nimport './VideoCard.css';\n\n\nfunction VideoCard({ url, likes, shares, channel, avatarSrc, song }) {\n    const [isVideoPlaying, setIsVideoPlaying] = \n    useState(false);\n    const videoRef = useRef(null);\n    \n    const onVideoPress = () => {\n        if (isVideoPlaying) {\n            // stop\n            videoRef.current.pause()\n            setIsVideoPlaying(false)\n        } else {\n            // play\n            videoRef.current.play()\n            setIsVideoPlaying(true)\n        }\n    };\n\n    return (\n        <div className=\"videoCard\">\n            <VideoHeader />\n            <video \n            ref={videoRef}\n            onClick={onVideoPress}\n            className=\"videoCard__player\"\n            src={url}\n            alt='TG reel video'\n            loop={true}\n            />\n            <VideoFooter \n            channel={channel}\n            likes={likes}\n            shares={shares}\n            avatarSrc={avatarSrc}\n            song={song}\n            />\n            \n        </div>\n    )\n}\n\nexport default VideoCard\n","// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nimport firebase from \"firebase\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCeKXaSkCM2rHe2n_gEC5CJmkdtsrpIC-0\",\n    authDomain: \"instargram-reeels-clone.firebaseapp.com\",\n    databaseURL: \"https://instargram-reeels-clone.firebaseio.com\",\n    projectId: \"instargram-reeels-clone\",\n    storageBucket: \"instargram-reeels-clone.appspot.com\",\n    messagingSenderId: \"220941182353\",\n    appId: \"1:220941182353:web:acc2732b2880026ac32630\",\n    measurementId: \"G-LDZXQ6TEGJ\"\n  };\n\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\n\n  const db = firebaseApp.firestore();\n\n  export default db;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport VideoCard from './VideoCard';\nimport db from \"./firebase\";\n\nfunction App() {\n  const [reels, setReels] = useState([]);\n\n  useEffect(() => {\n    // App component will run ONCE when it loads,\n    // and never again. like name, age, etc..\n    db.collection('reels').onSnapshot(snapshot => (\n      // snapshot.docs 는 firebase collection 안에 들어있는 모든 정보를\n      // 배열로 가지고 오는 기능을 하는 코드\n      setReels(snapshot.docs.map(doc => doc.data()))\n    ))\n  }, [])\n  // 긁어온 데이타를 여기 넣어준 빈 배열에 넣는 듯\n\n  return (\n    <div className=\"app\">\n      <h1>Let's begin!</h1>\n\n      <div className=\"app__top\">\n      {/* image at the top */}\n      <img\n        className=\"app__log\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Instagram_logo_2016.svg/768px-Instagram_logo_2016.svg.png\"\n        alt=\"\"\n        />\n        <h1>Reels</h1>\n      {/* Reels text */}\n      </div>\n\n      \n\n      <div className=\"app__videos\">\n        {/* container of app__video(scroll) */}\n      {reels.map(({channel, avatarSrc, song, url, likes, shares}) => (\n        \n      <VideoCard \n      avatarSrc={avatarSrc}\n      channel={channel}\n      likes={likes}\n      shares={shares} \n      song={song}\n      url={url}\n      />\n      \n      ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}